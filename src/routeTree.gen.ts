/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedVocabularyRouteImport } from './routes/_authenticated/vocabulary'
import { Route as AuthenticatedSocialRouteImport } from './routes/_authenticated/social'
import { Route as AuthenticatedRecognizeRouteImport } from './routes/_authenticated/recognize'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedHomeRouteImport } from './routes/_authenticated/home'
import { Route as AuthenticatedVocabularyIndexRouteImport } from './routes/_authenticated/vocabulary.index'
import { Route as AuthenticatedSocialIndexRouteImport } from './routes/_authenticated/social.index'
import { Route as AuthenticatedSocialTrendsRouteImport } from './routes/_authenticated/social.trends'
import { Route as AuthenticatedSocialRecommendedRouteImport } from './routes/_authenticated/social.recommended'
import { Route as AuthenticatedSocialNotificationsRouteImport } from './routes/_authenticated/social.notifications'
import { Route as AuthenticatedSocialMyPostsRouteImport } from './routes/_authenticated/social.my-posts'
import { Route as AuthenticatedSocialFollowingRouteImport } from './routes/_authenticated/social.following'
import { Route as AuthenticatedSocialFollowersRouteImport } from './routes/_authenticated/social.followers'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/_authenticated/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedVocabularyRoute = AuthenticatedVocabularyRouteImport.update({
  id: '/_authenticated/vocabulary',
  path: '/vocabulary',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSocialRoute = AuthenticatedSocialRouteImport.update({
  id: '/_authenticated/social',
  path: '/social',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRecognizeRoute = AuthenticatedRecognizeRouteImport.update({
  id: '/_authenticated/recognize',
  path: '/recognize',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/_authenticated/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedHomeRoute = AuthenticatedHomeRouteImport.update({
  id: '/_authenticated/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedVocabularyIndexRoute =
  AuthenticatedVocabularyIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedVocabularyRoute,
  } as any)
const AuthenticatedSocialIndexRoute =
  AuthenticatedSocialIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedSocialRoute,
  } as any)
const AuthenticatedSocialTrendsRoute =
  AuthenticatedSocialTrendsRouteImport.update({
    id: '/trends',
    path: '/trends',
    getParentRoute: () => AuthenticatedSocialRoute,
  } as any)
const AuthenticatedSocialRecommendedRoute =
  AuthenticatedSocialRecommendedRouteImport.update({
    id: '/recommended',
    path: '/recommended',
    getParentRoute: () => AuthenticatedSocialRoute,
  } as any)
const AuthenticatedSocialNotificationsRoute =
  AuthenticatedSocialNotificationsRouteImport.update({
    id: '/notifications',
    path: '/notifications',
    getParentRoute: () => AuthenticatedSocialRoute,
  } as any)
const AuthenticatedSocialMyPostsRoute =
  AuthenticatedSocialMyPostsRouteImport.update({
    id: '/my-posts',
    path: '/my-posts',
    getParentRoute: () => AuthenticatedSocialRoute,
  } as any)
const AuthenticatedSocialFollowingRoute =
  AuthenticatedSocialFollowingRouteImport.update({
    id: '/following',
    path: '/following',
    getParentRoute: () => AuthenticatedSocialRoute,
  } as any)
const AuthenticatedSocialFollowersRoute =
  AuthenticatedSocialFollowersRouteImport.update({
    id: '/followers',
    path: '/followers',
    getParentRoute: () => AuthenticatedSocialRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/home': typeof AuthenticatedHomeRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/recognize': typeof AuthenticatedRecognizeRoute
  '/social': typeof AuthenticatedSocialRouteWithChildren
  '/vocabulary': typeof AuthenticatedVocabularyRouteWithChildren
  '/': typeof AuthenticatedIndexRoute
  '/social/followers': typeof AuthenticatedSocialFollowersRoute
  '/social/following': typeof AuthenticatedSocialFollowingRoute
  '/social/my-posts': typeof AuthenticatedSocialMyPostsRoute
  '/social/notifications': typeof AuthenticatedSocialNotificationsRoute
  '/social/recommended': typeof AuthenticatedSocialRecommendedRoute
  '/social/trends': typeof AuthenticatedSocialTrendsRoute
  '/social/': typeof AuthenticatedSocialIndexRoute
  '/vocabulary/': typeof AuthenticatedVocabularyIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/home': typeof AuthenticatedHomeRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/recognize': typeof AuthenticatedRecognizeRoute
  '/': typeof AuthenticatedIndexRoute
  '/social/followers': typeof AuthenticatedSocialFollowersRoute
  '/social/following': typeof AuthenticatedSocialFollowingRoute
  '/social/my-posts': typeof AuthenticatedSocialMyPostsRoute
  '/social/notifications': typeof AuthenticatedSocialNotificationsRoute
  '/social/recommended': typeof AuthenticatedSocialRecommendedRoute
  '/social/trends': typeof AuthenticatedSocialTrendsRoute
  '/social': typeof AuthenticatedSocialIndexRoute
  '/vocabulary': typeof AuthenticatedVocabularyIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_authenticated/home': typeof AuthenticatedHomeRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/recognize': typeof AuthenticatedRecognizeRoute
  '/_authenticated/social': typeof AuthenticatedSocialRouteWithChildren
  '/_authenticated/vocabulary': typeof AuthenticatedVocabularyRouteWithChildren
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/social/followers': typeof AuthenticatedSocialFollowersRoute
  '/_authenticated/social/following': typeof AuthenticatedSocialFollowingRoute
  '/_authenticated/social/my-posts': typeof AuthenticatedSocialMyPostsRoute
  '/_authenticated/social/notifications': typeof AuthenticatedSocialNotificationsRoute
  '/_authenticated/social/recommended': typeof AuthenticatedSocialRecommendedRoute
  '/_authenticated/social/trends': typeof AuthenticatedSocialTrendsRoute
  '/_authenticated/social/': typeof AuthenticatedSocialIndexRoute
  '/_authenticated/vocabulary/': typeof AuthenticatedVocabularyIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/home'
    | '/profile'
    | '/recognize'
    | '/social'
    | '/vocabulary'
    | '/'
    | '/social/followers'
    | '/social/following'
    | '/social/my-posts'
    | '/social/notifications'
    | '/social/recommended'
    | '/social/trends'
    | '/social/'
    | '/vocabulary/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/home'
    | '/profile'
    | '/recognize'
    | '/'
    | '/social/followers'
    | '/social/following'
    | '/social/my-posts'
    | '/social/notifications'
    | '/social/recommended'
    | '/social/trends'
    | '/social'
    | '/vocabulary'
  id:
    | '__root__'
    | '/login'
    | '/register'
    | '/_authenticated/home'
    | '/_authenticated/profile'
    | '/_authenticated/recognize'
    | '/_authenticated/social'
    | '/_authenticated/vocabulary'
    | '/_authenticated/'
    | '/_authenticated/social/followers'
    | '/_authenticated/social/following'
    | '/_authenticated/social/my-posts'
    | '/_authenticated/social/notifications'
    | '/_authenticated/social/recommended'
    | '/_authenticated/social/trends'
    | '/_authenticated/social/'
    | '/_authenticated/vocabulary/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  AuthenticatedHomeRoute: typeof AuthenticatedHomeRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedRecognizeRoute: typeof AuthenticatedRecognizeRoute
  AuthenticatedSocialRoute: typeof AuthenticatedSocialRouteWithChildren
  AuthenticatedVocabularyRoute: typeof AuthenticatedVocabularyRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/vocabulary': {
      id: '/_authenticated/vocabulary'
      path: '/vocabulary'
      fullPath: '/vocabulary'
      preLoaderRoute: typeof AuthenticatedVocabularyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/social': {
      id: '/_authenticated/social'
      path: '/social'
      fullPath: '/social'
      preLoaderRoute: typeof AuthenticatedSocialRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/recognize': {
      id: '/_authenticated/recognize'
      path: '/recognize'
      fullPath: '/recognize'
      preLoaderRoute: typeof AuthenticatedRecognizeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/home': {
      id: '/_authenticated/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthenticatedHomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/vocabulary/': {
      id: '/_authenticated/vocabulary/'
      path: '/'
      fullPath: '/vocabulary/'
      preLoaderRoute: typeof AuthenticatedVocabularyIndexRouteImport
      parentRoute: typeof AuthenticatedVocabularyRoute
    }
    '/_authenticated/social/': {
      id: '/_authenticated/social/'
      path: '/'
      fullPath: '/social/'
      preLoaderRoute: typeof AuthenticatedSocialIndexRouteImport
      parentRoute: typeof AuthenticatedSocialRoute
    }
    '/_authenticated/social/trends': {
      id: '/_authenticated/social/trends'
      path: '/trends'
      fullPath: '/social/trends'
      preLoaderRoute: typeof AuthenticatedSocialTrendsRouteImport
      parentRoute: typeof AuthenticatedSocialRoute
    }
    '/_authenticated/social/recommended': {
      id: '/_authenticated/social/recommended'
      path: '/recommended'
      fullPath: '/social/recommended'
      preLoaderRoute: typeof AuthenticatedSocialRecommendedRouteImport
      parentRoute: typeof AuthenticatedSocialRoute
    }
    '/_authenticated/social/notifications': {
      id: '/_authenticated/social/notifications'
      path: '/notifications'
      fullPath: '/social/notifications'
      preLoaderRoute: typeof AuthenticatedSocialNotificationsRouteImport
      parentRoute: typeof AuthenticatedSocialRoute
    }
    '/_authenticated/social/my-posts': {
      id: '/_authenticated/social/my-posts'
      path: '/my-posts'
      fullPath: '/social/my-posts'
      preLoaderRoute: typeof AuthenticatedSocialMyPostsRouteImport
      parentRoute: typeof AuthenticatedSocialRoute
    }
    '/_authenticated/social/following': {
      id: '/_authenticated/social/following'
      path: '/following'
      fullPath: '/social/following'
      preLoaderRoute: typeof AuthenticatedSocialFollowingRouteImport
      parentRoute: typeof AuthenticatedSocialRoute
    }
    '/_authenticated/social/followers': {
      id: '/_authenticated/social/followers'
      path: '/followers'
      fullPath: '/social/followers'
      preLoaderRoute: typeof AuthenticatedSocialFollowersRouteImport
      parentRoute: typeof AuthenticatedSocialRoute
    }
  }
}

interface AuthenticatedSocialRouteChildren {
  AuthenticatedSocialFollowersRoute: typeof AuthenticatedSocialFollowersRoute
  AuthenticatedSocialFollowingRoute: typeof AuthenticatedSocialFollowingRoute
  AuthenticatedSocialMyPostsRoute: typeof AuthenticatedSocialMyPostsRoute
  AuthenticatedSocialNotificationsRoute: typeof AuthenticatedSocialNotificationsRoute
  AuthenticatedSocialRecommendedRoute: typeof AuthenticatedSocialRecommendedRoute
  AuthenticatedSocialTrendsRoute: typeof AuthenticatedSocialTrendsRoute
  AuthenticatedSocialIndexRoute: typeof AuthenticatedSocialIndexRoute
}

const AuthenticatedSocialRouteChildren: AuthenticatedSocialRouteChildren = {
  AuthenticatedSocialFollowersRoute: AuthenticatedSocialFollowersRoute,
  AuthenticatedSocialFollowingRoute: AuthenticatedSocialFollowingRoute,
  AuthenticatedSocialMyPostsRoute: AuthenticatedSocialMyPostsRoute,
  AuthenticatedSocialNotificationsRoute: AuthenticatedSocialNotificationsRoute,
  AuthenticatedSocialRecommendedRoute: AuthenticatedSocialRecommendedRoute,
  AuthenticatedSocialTrendsRoute: AuthenticatedSocialTrendsRoute,
  AuthenticatedSocialIndexRoute: AuthenticatedSocialIndexRoute,
}

const AuthenticatedSocialRouteWithChildren =
  AuthenticatedSocialRoute._addFileChildren(AuthenticatedSocialRouteChildren)

interface AuthenticatedVocabularyRouteChildren {
  AuthenticatedVocabularyIndexRoute: typeof AuthenticatedVocabularyIndexRoute
}

const AuthenticatedVocabularyRouteChildren: AuthenticatedVocabularyRouteChildren =
  {
    AuthenticatedVocabularyIndexRoute: AuthenticatedVocabularyIndexRoute,
  }

const AuthenticatedVocabularyRouteWithChildren =
  AuthenticatedVocabularyRoute._addFileChildren(
    AuthenticatedVocabularyRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  AuthenticatedHomeRoute: AuthenticatedHomeRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedRecognizeRoute: AuthenticatedRecognizeRoute,
  AuthenticatedSocialRoute: AuthenticatedSocialRouteWithChildren,
  AuthenticatedVocabularyRoute: AuthenticatedVocabularyRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
